import React, { useRef, useState, useEffect } from 'react';
import { Stage, Layer, Image, Text } from 'react-konva';
import { toPng } from 'html-to-image';

interface KonvaImageGeneratorProps {
  templateImage: string;
  fields?: any[];
  formData?: Record<string, any>;
  width?: number;
  height?: number;
  onImageGenerated?: (imageURL: string) => void;
  className?: string;
}

export const KonvaImageGenerator: React.FC<KonvaImageGeneratorProps> = ({
  templateImage,
  fields = [],
  formData = {},
  width = 800,
  height = 600,
  onImageGenerated,
  className = '',
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const stageRef = useRef<any>(null);
  const [image, setImage] = useState<HTMLImageElement | null>(null);

  useEffect(() => {
    if (!templateImage) return;

    const img = new window.Image();
    img.crossOrigin = 'anonymous';
    img.onload = () => setImage(img);
    img.src = templateImage;
  }, [templateImage]);

  const generateImage = async () => {
    if (!stageRef.current) return;
    const dataUrl = stageRef.current.toDataURL({ pixelRatio: 2 });
    if (onImageGenerated) onImageGenerated(dataUrl);
  };

  const calculateDimensions = () => {
    if (!image) return { width, height };
    const aspectRatio = image.width / image.height;
    return aspectRatio > 1
      ? { width, height: width / aspectRatio }
      : { width: height * aspectRatio, height };
  };

  const getFieldValue = (field: any) => {
    const value = formData[field.name] ?? field.defaultValue ?? field.label ?? '';
    return value;
  };

  const getTextStyles = (field: any) => {
    const style = field.style || {};
    return {
      fontFamily: style.fontFamily || 'Cairo',
      fontSize: style.fontSize || 20,
      fill: style.color || '#000',
      align: style.align || 'center',
      width: style.width || 300,
      fontStyle: style.fontWeight || 'normal',
      padding: 5,
    };
  };

  const getPosition = (field: any, dimensions: { width: number; height: number }) => {
    const pos = field.position || { x: 50, y: 50 };
    const x = (pos.x / 100) * dimensions.width;
    const y = (pos.y / 100) * dimensions.height;
    return { x, y };
  };

  const dimensions = calculateDimensions();

  return (
    <div ref={containerRef} className={`relative ${className}`} style={{ width: dimensions.width, height: dimensions.height }}>
      <Stage ref={stageRef} width={dimensions.width} height={dimensions.height}>
        <Layer>
          {image && <Image image={image} width={dimensions.width} height={dimensions.height} />}
          {fields.map((field, idx) => {
            const position = getPosition(field, dimensions);
            const textStyles = getTextStyles(field);
            const value = getFieldValue(field);

            return (
              <Text
                key={idx}
                text={value}
                x={position.x}
                y={position.y}
                offsetX={textStyles.align === 'center' ? textStyles.width / 2 : 0}
                offsetY={textStyles.fontSize ? textStyles.fontSize / 2 : 0}
                {...textStyles}
              />
            );
          })}
        </Layer>
      </Stage>
    </div>
  );
};

export default KonvaImageGenerator;
