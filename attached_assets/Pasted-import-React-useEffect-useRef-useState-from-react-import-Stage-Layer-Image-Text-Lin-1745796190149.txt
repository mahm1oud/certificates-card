import React, { useEffect, useRef, useState } from 'react';
import { Stage, Layer, Image, Text, Line } from 'react-konva';

interface Field {
  id: string;
  name: string;
  position: { x: number; y: number };
  style?: {
    fontFamily?: string;
    fontSize?: number;
    fontWeight?: string;
    color?: string;
    align?: 'left' | 'center' | 'right';
    width?: number;
  };
}

interface DraggableFieldsPreviewProps {
  templateImage: string; // رابط صورة القالب
  fields: Field[];
  onUpdateField: (updatedField: Field) => void;
}

const DraggableFieldsPreview: React.FC<DraggableFieldsPreviewProps> = ({ templateImage, fields, onUpdateField }) => {
  const [backgroundImage, setBackgroundImage] = useState<HTMLImageElement | null>(null);
  const [imageDimensions, setImageDimensions] = useState({ width: 800, height: 600 });
  const stageRef = useRef<any>(null);

  // تحميل صورة الخلفية ومعرفة أبعادها الأصلية
  useEffect(() => {
    if (!templateImage) return;

    const img = new window.Image();
    img.crossOrigin = 'anonymous';
    img.onload = () => {
      setBackgroundImage(img);
      setImageDimensions({ width: img.naturalWidth, height: img.naturalHeight });
    };
    img.src = templateImage;
  }, [templateImage]);

  const handleDragEnd = (e: any, field: Field) => {
    const newX = (e.target.x() / imageDimensions.width) * 100;
    const newY = (e.target.y() / imageDimensions.height) * 100;

    onUpdateField({
      ...field,
      position: { x: newX, y: newY },
    });
  };

  // رسم شبكة خطوط كل 100px
  const drawGrid = () => {
    const lines = [];
    const gridSize = 100;

    for (let i = 0; i < imageDimensions.width; i += gridSize) {
      lines.push(
        <Line
          key={`v-${i}`}
          points={[i, 0, i, imageDimensions.height]}
          stroke="#ccc"
          strokeWidth={0.5}
          dash={[4, 4]}
        />
      );
    }
    for (let j = 0; j < imageDimensions.height; j += gridSize) {
      lines.push(
        <Line
          key={`h-${j}`}
          points={[0, j, imageDimensions.width, j]}
          stroke="#ccc"
          strokeWidth={0.5}
          dash={[4, 4]}
        />
      );
    }
    return lines;
  };

  const getFieldStyles = (field: Field) => {
    const style = field.style || {};
    const fontFamily = style.fontFamily || 'Cairo';
    const fontSize = style.fontSize || 20;
    const fontWeight = style.fontWeight || 'normal';
    const color = style.color || '#000';

    return {
      fontFamily,
      fontSize,
      fontStyle: fontWeight,
      fill: color,
      width: style.width || 300,
      align: style.align || 'center',
    };
  };

  const getPosition = (field: Field) => {
    const { width, height } = imageDimensions;
    return {
      x: (field.position.x / 100) * width,
      y: (field.position.y / 100) * height,
    };
  };

  return (
    <div className="relative">
      <Stage width={imageDimensions.width} height={imageDimensions.height} ref={stageRef}>
        <Layer>
          {/* خلفية القالب */}
          {backgroundImage && (
            <Image
              image={backgroundImage}
              width={imageDimensions.width}
              height={imageDimensions.height}
            />
          )}

          {/* شبكة المحاذاة */}
          {drawGrid()}

          {/* الحقول القابلة للسحب */}
          {fields.map((field) => {
            const position = getPosition(field);
            const styles = getFieldStyles(field);

            return (
              <Text
                key={field.id}
                text={field.name}
                x={position.x}
                y={position.y}
                draggable
                fontSize={styles.fontSize}
                fontFamily={styles.fontFamily}
                fontStyle={styles.fontStyle}
                fill={styles.fill}
                width={styles.width}
                align={styles.align}
                offsetX={styles.align === 'center' ? styles.width / 2 : 0}
                offsetY={styles.fontSize / 2}
                onDragEnd={(e) => handleDragEnd(e, field)}
              />
            );
          })}
        </Layer>
      </Stage>
    </div>
  );
};

export default DraggableFieldsPreview;
